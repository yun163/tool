##########################################
# Akka Persistence Reference Config File #
##########################################



akka {

  # Protobuf serialization for persistent messages
  actor {

    serializers {

      akka-persistence-snapshot = "akka.persistence.serialization.SnapshotSerializer"
      akka-persistence-message = "akka.persistence.serialization.MessageSerializer"
    }

    serialization-bindings {

      "akka.persistence.serialization.Snapshot" = akka-persistence-snapshot
      "akka.persistence.serialization.Message" = akka-persistence-message
    }
  }

  persistence {
    performance {
        cycles {
            warmup = 1000
            load = 100000
        }
    }

    journal {

      # Maximum size of a persistent message batch written to the journal.
      # Only applies to internally created batches by processors that receive
      # persistent messages individually. Application-defined batches, even if
      # larger than this setting, are always written as a single isolated batch.
      max-message-batch-size = 200

      # Maximum size of a confirmation batch written to the journal.
      max-confirmation-batch-size = 10000

      # Maximum size of a deletion batch written to the journal.
      max-deletion-batch-size = 10000

      # Path to the journal plugin to be used
      plugin = "akka.persistence.journal.leveldb"

      # In-memory journal plugin.
      inmem {

        # Class name of the plugin.
        class = "akka.persistence.journal.inmem.InmemJournal"

        # Dispatcher for the plugin actor.
        plugin-dispatcher = "akka.actor.default-dispatcher"
      }

      # LevelDB journal plugin.
      leveldb {

        # Class name of the plugin.
        class = "akka.persistence.journal.leveldb.LeveldbJournal"

        # Dispatcher for the plugin actor.
        plugin-dispatcher = "akka.persistence.dispatchers.default-plugin-dispatcher"

        # Dispatcher for message replay.
        replay-dispatcher = "akka.persistence.dispatchers.default-replay-dispatcher"

        # Storage location of LevelDB files.
        dir = "journal"

        # Use fsync on write
        fsync = on

        # Verify checksum on read.
        checksum = off

        # Native LevelDB (via JNI) or LevelDB Java port
        native = off
      }

      # Shared LevelDB journal plugin (for testing only).
      leveldb-shared {

        # Class name of the plugin.
        class = "akka.persistence.journal.leveldb.SharedLeveldbJournal"

        # Dispatcher for the plugin actor.
        plugin-dispatcher = "akka.actor.default-dispatcher"
        
        # timeout for async journal operations
        timeout = 10s

        store {

          # Dispatcher for shared store actor.
          store-dispatcher = "akka.persistence.dispatchers.default-plugin-dispatcher"

          # Dispatcher for message replay.
          replay-dispatcher = "akka.persistence.dispatchers.default-plugin-dispatcher"

          # Storage location of LevelDB files.
          dir = "journal"

          # Use fsync on write
          fsync = on

          # Verify checksum on read.
          checksum = off

          # Native LevelDB (via JNI) or LevelDB Java port
          native = off
        }
      }
    }

    snapshot-store {

      # Path to the snapshot store plugin to be used
      plugin = "akka.persistence.snapshot-store.local"

      # Local filesystem snapshot store plugin.
      local {

        # Class name of the plugin.
        class = "akka.persistence.snapshot.local.LocalSnapshotStore"

        # Dispatcher for the plugin actor.
        plugin-dispatcher = "akka.persistence.dispatchers.default-plugin-dispatcher"

        # Dispatcher for streaming snapshot IO.
        stream-dispatcher = "akka.persistence.dispatchers.default-stream-dispatcher"

        # Storage location of snapshot files.
        dir = "snapshots"
      }
    }

    view {

      # Automated incremental view update.
      auto-update = on

      # Interval between incremental updates
      auto-update-interval = 5s

      # Maximum number of messages to replay per incremental view update. Set to
      # -1 for no upper limit.
      auto-update-replay-max = -1
    }

    dispatchers {
      default-plugin-dispatcher {
        type = PinnedDispatcher
        executor = "thread-pool-executor"
      }
      default-replay-dispatcher {
        type = Dispatcher
        executor = "fork-join-executor"
        fork-join-executor {
          parallelism-min = 2
          parallelism-max = 8
        }
      }
      default-stream-dispatcher {
        type = Dispatcher
        executor = "fork-join-executor"
        fork-join-executor {
          parallelism-min = 2
          parallelism-max = 8
        }
      }
      akka-hbase-persistence-dispatcher {
        type = Dispatcher
        executor = "thread-pool-executor"
        thread-pool-executor {
          core-pool-size-min = 2
          core-pool-size-factor = 2.0
          core-pool-size-max = 10
        }
        throughput = 100
      }
    }
  }

    contrib.persistence.mongodb.mongo {
        urls = ["localhost:27017"]
        db = "coinex"
        journal-collection = "events"
        journal-index = "messages_index"
        snaps-collection = "snapshots"
        snaps-index = "snapshots_index"
    }
}


        hadoop-snapshot-store {
          table = "snapshot"
          family = "a"
          partition.count= 1
          scan-batch-size = 50
          hdfs-default-name = "hdfs://weichaoli:54310"
          snapshot-dir = "/snapshot/"
          publish-testing-events = on
          class = "akka.persistence.hbase.snapshot.HadoopSnapshotStore"

          #plugin-dispatcher = "default-plugin-dispatcher"
          #replay-dispatcher = "default-replay-dispatcher"

          plugin-dispatcher = "akka.persistence.dispatchers.default-plugin-dispatcher"
          replay-dispatcher = "akka.persistence.dispatchers.default-replay-dispatcher"

          impl = "akka.persistence.hbase.snapshot.HdfsSnapshotter"
          #impl = "akka.persistence.hbase.snapshot.HBaseSnapshotter"
          hbase {
            cluster.distributed = false
            zookeeper.quorum = "weichaoli:2181"
          }
        }



        hbase-journal {
          table = "messages"
          family = "a"
          partition.count= 1
          scan-batch-size = 200
          hdfs-default-name = "hdfs://weichaoli:54310"
          snapshot-dir = "/snapshot"
          publish-testing-events = on

          #plugin-dispatcher = "default-plugin-dispatcher"
          #replay-dispatcher = "default-replay-dispatcher"

          plugin-dispatcher = "akka.persistence.dispatchers.default-plugin-dispatcher"
          replay-dispatcher = "akka.persistence.dispatchers.default-replay-dispatcher"

          class = "akka.persistence.hbase.journal.HBaseAsyncWriteJournal"
          hbase {
            cluster.distributed = false
            zookeeper.quorum = "weichaoli:2181"
          }
        }


